//nadav shoshan 305355356
// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int length,max;
    field Array str;
    

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(maxLength<0){
            do Sys.error(14);
        }
        let length = 0;
        let max = maxLength;
        if(maxLength=0){
            let str = Array.new(1);
        }else{
            let str =  Array.new(max); 
        }
        return this;

    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if((j<0)|(j>(length-1))){
            do Sys.error(15);
        }
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if((j>-1)&(j<length)){
            let str[j]=c;
        }else{
            do Sys.error(16); 
        }
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(~(length<max)){
            do Sys.error(17);
        }
        let str[length]=c;
        let length = length+1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(length=0){
           do Sys.error(18);
        }
        let length = length-1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int num,i,sign;
        var char dig;
        let sign = 1;
        let i = 0;
        let dig  = str[i];
        if(dig=45){
            let sign = -1;
            let i = i+1;
        }
        let num = 0;
        while (i<length){
            let dig = str[i];
            if(dig<48|dig>57){
                return num;
            }
            let num = num*10;
            let num = num+(dig-48);
            let i = i+1;
        }
        return num*sign;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int numOfDigits,thrashHold;
        let length = 0; // init this string.
        if(val<0){
            let val = -val;
            do appendChar(45); // start whith '-'
        }
         do setIntRec(val);
         return;

    }
     method void setIntRec(int val){
         var int last_digit,dec_val;
         var char c;
         let dec_val = val/10;
         let last_digit = val-((dec_val)*10);
         let c = String.intTochar(last_digit);
         if(val<10){
             do appendChar(c);
         }else{
             do setIntRec(dec_val);
             do appendChar(c);
         }
         return;
     }

    function char intTochar(int digit) {
        return digit + 48;
    }
    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}

//nadav shoshan 305355356
// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static int screenBase;
    static int screenEnd;
    static boolean black;
    static int twoToThe;

    /** Initializes the Screen. */
    function void init() {
        let screenBase = 16384;
        let screenEnd = 8191;
        do Screen.setColor(true);
        let twoToThe=Array.new(16);
        let twoToThe[0]=1;
        let twoToThe[1]=2;
        let twoToThe[2]=4;
        let twoToThe[3]=8;
        let twoToThe[4]=16;
        let twoToThe[5]=32;
        let twoToThe[6]=64;
        let twoToThe[7]=128;
        let twoToThe[8]=256;
        let twoToThe[9]=512;
        let twoToThe[10]=1024;
        let twoToThe[11]=2048;
        let twoToThe[12]=4096;
        let twoToThe[13]=8192;
        let twoToThe[14]=16384;
        let twoToThe[15]=twoToThe[14]+twoToThe[14];
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while (i< screenEnd){
          let screenBase[i]=0;
          let  i=i+1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let black = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address,value,req_bit;
        if((x>511)|(y>255)|(x<0)|(y<0)){
            do Sys.error(7);
        }
        let address = (32*y) + (x/16);
        if (black){
            do Memory.poke(address+screenBase,Memory.peek(address+screenBase) | twoToThe[x&15]);
        }else{
            do Memory.poke(address+screenBase,Memory.peek(address+screenBase) & ~twoToThe[x&15]);
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx,dy,diff,a,b,inc_x,inc_y,tmp;
        if((x1>511)|(y1>255)|(x1<0)|(y1<0)){
            do Sys.error(8);
        }
        if((x2>511)|(y2>255)|(x2<0)|(y2<0)){
            do Sys.error(8);
        }
        let dx= x2-x1;
        if(dx<0){
            do Screen.drawLine(x2,y2,x1,y1);
        }

        let dy = y2-y1;
        let inc_x=1;
        let inc_y = 1;
        if(dy<0){
            let inc_y = -1;
            let dy = Math.abs(dy);
        }

        let diff = 0;
        let a = 0;
        let b = 0;
        //handle vertical/ horozontal lines.
        if(dx = 0){
            while(~(tmp>dy)){
                do Screen.drawPixel( x1, y1+b);
                let b = b+inc_y;
                let tmp = Math.abs(b);
            }
            return;
        }
        if(dy = 0){
            while(~(a>dx)){
                do Screen.drawPixel( x1+a, y1);
                let a = a+inc_x;
            }
            return;
        }
        // handle diagonal lines.
        while( ~(a>dx) & ~(Math.abs(b)>dy)){
            do Screen.drawPixel(x1+a,y1+b);
            if(diff<0){
                let a=a+inc_x;
                let diff = diff+dy;   
            }else{
                let b = b+inc_y;
                let diff = diff-dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        if((x1>511)|(y1>255)|(x1<0)|(y1<0)){
            do Sys.error(9);
        }
        if((x2>511)|(y2>255)|(x2<0)|(y2<0)){
            do Sys.error(9);
        }
        while (~(x1>x2)){
            do Screen.drawLine(x1,y1,x1,y2);
           let x1 = x1+1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. 
    if r > 181 draws circle wite radius of 181 (maximum)*/
    function void drawCircle(int x, int y, int r) {
        var int i ,rr,s;
        if((x>511)|(y>255)|(x<0)|(y<0)){
            do Sys.error(12);
        }
        if(r<1){
            do Sys.error(13);
        }
        if (r>181){
            let r=181;
        }
        let i = -r;
        let rr = r*r;
        while(~(i>r)){
            let s=Math.sqrt(rr-(i*i));
            do Screen.drawLine(x-s,i+y,x+s,i+y);
           let i=i+1;
        }
        return;
    }
    /** Draws a unfilled circle of radius r<=181 around (x,y), using the current color. 
    if r > 181 draws circle wite radius of 181 (maximum)*/
        function void drawUFCircle(int x, int y, int r) {
        var int i ,rr,s;
        if((x>511)|(y>255)|(x<0)|(y<0)){
            do Sys.error(12);
        }
        if(r<1){
            do Sys.error(13);
        }
        if (r>181){
            let r=181;
        }
        let i = -r;
        let rr = r*r;
        while(~(i>r)){
            let s=Math.sqrt(rr-(i*i));
            do Screen.drawPixel(x+s,i+y);
            do Screen.drawPixel(x-s,i+y);
           let i=i+1;
        }
        return;
    }
}
